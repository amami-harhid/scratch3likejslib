/**
 * Sample20
 * „É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°Âèó‰ø°„Åó„ÄÅ„Éï„Ç≠„ÉÄ„Ç∑(SAY,THINK)„ÇíÂà∂Âæ°„Åô„Çã
 * „É°„ÉÉ„Çª„Éº„Ç∏„ÅØEventEmitter„Çí‰Ωø„ÅÑÂÆüË£Ö„Åó„Å¶„ÅÑ„Çã„ÄÇ
 * EventEmitter„ÅØÂêå‰∏ÄID„ÅÆÂèó‰ø°(on)„ÅÆÂÆöÁæ©„ÅØ10ÂÄã„Åæ„Åß„ÅÆÂà∂Èôê„Åå„ÅÇ„Çã„Åå„ÄÅ
 * „ÄéwhenBroadcastReceived„Äè„Çí‰Ωø„ÅÜ„Åì„Å®„Åß„ÄÅÂêå‰∏ÄID„ÅÆÂèó‰ø°ÁôªÈå≤Êï∞„Å´„Å§„ÅÑ„Å¶
 * ÂÆüË£Ö‰∏ä„ÅÆ‰∏äÈôê„ÅØ„Å™„ÅÑÔºà„Åü„Å†„ÅóÂèó‰ø°ÁôªÈå≤Êï∞„ÅåÊ•µÁ´Ø„Å´Â§ö„ÅÑ„Å®„Åç„ÅØÂãï„Åç„ÅåÈÅÖ„Åè„Å™„Çã„Åã„ÇÇÔºâ
 */
import {PlayGround, Library} from '../../build/likeScratchLib.js'
const [Pg, Lib] = [PlayGround, Library]; // Áü≠Á∏ÆÂêç„Å´„Åô„Çã

Pg.title = "„ÄêSample20„Äë‰∫åÂåπ„ÅÆ„Éç„Ç≥„ÄÅ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°Âèó‰ø°„Åó„Å¶‰ºöË©±„Çí„Åï„Åõ„Çã"

const BackDrop = "BackDrop";
const Cat1 = "Cat1";
const Cat2 = "Cat2";

let stage, cat, cat2;
import {
    bubbleTextArr, 
    bubbleTextArr2, 
    MessageCat1Say, 
    MessageCat2Say,
    MessageCat2Think,
    MessageByeBye,
    MessageTAIJYO} from './bubble.js';

Pg.preload = async function preload() {
    this.Image.load('../assets/backdrop.png', BackDrop );
    this.Image.load('../assets/cat.svg', Cat1 );
    this.Image.load('../assets/cat2.svg', Cat2 );
}
Pg.prepare = async function prepare() {
    stage = new Lib.Stage();
    stage.Image.add( BackDrop );

    cat = new Lib.Sprite("Cat");
    cat.Motion.setRotationStyle( Lib.RotationStyle.LEFT_RIGHT );
    cat.Image.add( Cat1 );
    cat.Image.add( Cat2 );
    cat.Motion.moveTo({x: -150, y: 0});
    cat.Motion.pointInDirection( 90 );
    cat2 = new Lib.Sprite("Cat2");
    cat2.Motion.setRotationStyle( Lib.RotationStyle.LEFT_RIGHT );
    cat2.Image.add( Cat1 );
    cat2.Image.add( Cat2 );
    cat2.Motion.pointInDirection( -90 );
    cat2.Motion.moveTo({x: 150, y: 0});
}

Pg.setting = async function setting() {

    const BubbleScale = {scale:{x:100,y:100}};
    stage.Event.whenFlag( async function() {
        // 1ÁßíÂæÖ„Å§
        await Lib.wait(1000);
        
        // (‚Üì)È†ÜÁï™„Å´„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ„Å£„Å¶ÂæÖ„Å§

        //(Â∑¶) "„Åì„Çì„Å´„Å°„ÅØ„ÄÇËâØ„ÅÑÂ§©Ê∞ó„Åß„Åô„Å≠"
        await this.Event.broadcastAndWait(MessageCat1Say, bubbleTextArr[0], 3); // 3 
        //(Âè≥) "üíö„Åì„Çì„Å´„Å°„ÅØüíöÈùíÁ©∫„Åå„Çà„ÅÑÊÑü„Åò„Åß„Åô„Å≠"
        await this.Event.broadcastAndWait(MessageCat2Say, bubbleTextArr2[0], 1); // 1
        //(Âè≥) "„Å©„Åì„Å´„Åä„Åß„Åã„Åë„Åß„Åô„Åã"
        await this.Event.broadcastAndWait(MessageCat2Say, bubbleTextArr2[1], 2); // 2
        //(Â∑¶) "„Å°„Çá„Å£„Å®Ëøë„Åè„ÅÆ„Çπ„Éº„Éë„Éº„Å´Ë≤∑„ÅÑÁâ©„Å´„ÅÑ„Åè„Çì„Åß„Åô„Çà"
        await this.Event.broadcastAndWait(MessageCat1Say, bubbleTextArr[1], 1); // 1
        //(Âè≥) "„ÅÇ„Çâ„ÅÇ„Çâ„Åù„Çå„ÅØ„ÅÑ„ÅÑ„Åß„Åô„Å≠"
        await this.Event.broadcastAndWait(MessageCat2Think, bubbleTextArr2[2], 4); // 4
        // „Åä‰∫í„ÅÑ„Å´ÈÄÄÂ†¥
        await this.Event.broadcastAndWait(MessageByeBye, "„Åù„Çå„Åß„ÅØ„ÄÅ„Åæ„ÅüÔºÅ", 2); // 4
        this.Event.broadcast(MessageTAIJYO);

    });
    cat.Event.whenBroadcastReceived(MessageCat1Say, async function*() {
        // ‰∏ä‰∏ã„Å´Êè∫„Çâ„Åô„ÄÇ
        const times = Array(10).fill();
        for(const _ in times){
            this.Motion.changeY(+2);
            yield;
        }
        for(const _ in times){
            this.Motion.changeY(-2);
            yield;
        }
    });
    cat.Event.whenBroadcastReceived(MessageCat1Say, async function(text,time) {
        // Cat „ÅÆ „Éï„Ç≠„ÉÄ„Ç∑ „ÇíÂá∫„Åô
        //console.log('CAT „Éï„Ç≠„ÉÄ„Ç∑ time='+time + " text="+text);
        if(time>0) {
            await this.Looks.sayForSecs(text, time, BubbleScale);
        }else{
            this.Looks.say(text);
        }
    });
    cat.Event.whenBroadcastReceived(MessageTAIJYO, async function*() {
        // Cat ÈÄÄÂ†¥
        this.Looks.say('');
        this.Motion.turnRightDegrees(180); // ÂèçÂØæÊñπÂêë„Å∏
        for(;;){
            this.Motion.moveSteps(5);
            if(this.Sensing.isTouchingEdge()) {
                break;
            }
            yield;
        }
        this.Looks.hide(); 
    });
    cat2.Event.whenBroadcastReceived(MessageTAIJYO, async function*() {
        // Cat2 ÈÄÄÂ†¥
        //console.log('Cat2 ÈÄÄÂ†¥');
        this.Looks.say('');
        this.Motion.turnRightDegrees(180); // ÂèçÂØæÊñπÂêë„Å∏
        for(;;){
            this.Motion.moveSteps(5);
            if(this.Sensing.isTouchingEdge()) {
                break;
            }
            yield;
        }
        this.Looks.hide();       
    });
    cat2.Event.whenBroadcastReceived(MessageCat2Say, async function*() {
        // ‰∏ä‰∏ã„Å´Êè∫„Çâ„Åô„ÄÇ
        const times = Array(10).fill();
        for(const _ in times){
            this.Motion.changeY(+2);
            yield;
        }
        for(const _ in times){
            this.Motion.changeY(-2);
            yield;
        }
    });
    cat2.Event.whenBroadcastReceived(MessageCat2Say, async function(text="", time=-1) {
        // Cat2 „ÅÆ „Éï„Ç≠„ÉÄ„Ç∑ „ÇíÂá∫„Åô
        if(time>0) {
            await this.Looks.sayForSecs(text, time, BubbleScale);
        }else{
            this.Looks.say(text);
        }    
    });
    cat2.Event.whenBroadcastReceived(MessageCat2Think, async function(text="", time=-1) {
        // Cat2 „ÅÆ „Éï„Ç≠„ÉÄ„Ç∑ „ÇíÂá∫„Åô
        //console.log('CAT2 „Éï„Ç≠„ÉÄ„Ç∑ time='+time + " text="+text);
        if(time>0) {
            await this.Looks.thinkForSecs(text, time);
        }else{
            this.Looks.think(text);
        }    
    });
    cat.Event.whenBroadcastReceived(MessageByeBye, async function(text="", time=-1) {
        // „Åù„Çå„Åß„ÅØ„ÄÅ„Å®„ÅÑ„ÅÜ
        //console.log('CAT „Éï„Ç≠„ÉÄ„Ç∑ time='+time + " text="+text);
        await this.Looks.thinkForSecs(text, time);
    });
    cat2.Event.whenBroadcastReceived(MessageByeBye, async function(text="", time=-1) {
        // „Åù„Çå„Åß„ÅØ„ÄÅ„Å®„ÅÑ„ÅÜ
        //console.log('CAT2 „Éï„Ç≠„ÉÄ„Ç∑ time='+time + " text="+text);
        await this.Looks.sayForSecs(text, time);
    });

}